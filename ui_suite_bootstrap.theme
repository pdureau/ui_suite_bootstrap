<?php

/**
 * @file
 * Functions to support theming in the ui_suite_bootstrap theme.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Core\Template\AttributeHelper;
use Drupal\ui_suite_bootstrap\HookHandler\ElementInfoAlter;
use Drupal\ui_suite_bootstrap\HookHandler\FormSearchBlockFormAlter;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessFormElement;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessInput;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPage;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternAccordion;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternAccordionItem;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternAlert;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternCard;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternCardBody;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternCarousel;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternDropdown;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternNavbar;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternNavbarNav;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternNavItem;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternPagination;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessSelect;
use Drupal\ui_suite_bootstrap\HookHandler\PreprocessTextarea;
use Drupal\ui_suite_bootstrap\HookHandler\ThemeSuggestionsAlter;

/**
 * Implements hook_element_info_alter().
 */
function ui_suite_bootstrap_element_info_alter(array &$info): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\ElementInfoAlter $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ElementInfoAlter::class);
  $instance->alter($info);
}

/**
 * Implements hook_form_FORM_ID_alter() for 'search_block_form'.
 */
function ui_suite_bootstrap_form_search_block_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\FormSearchBlockFormAlter $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(FormSearchBlockFormAlter::class);
  $instance->alter($form, $form_state, $form_id);
}

/**
 * Implements hook_preprocess_HOOK() for 'form_element'.
 */
function ui_suite_bootstrap_preprocess_form_element(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessFormElement $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessFormElement::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'input'.
 */
function ui_suite_bootstrap_preprocess_input(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessInput $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessInput::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'page'.
 */
function ui_suite_bootstrap_preprocess_page(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPage $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPage::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_accordion'.
 */
function ui_suite_bootstrap_preprocess_pattern_accordion(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternAccordion $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternAccordion::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_accordion_item'.
 */
function ui_suite_bootstrap_preprocess_pattern_accordion_item(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternAccordionItem $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternAccordionItem::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_alert'.
 */
function ui_suite_bootstrap_preprocess_pattern_alert(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternAlert $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternAlert::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_card'.
 */
function ui_suite_bootstrap_preprocess_pattern_card(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternCard $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternCard::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_card_body'.
 */
function ui_suite_bootstrap_preprocess_pattern_card_body(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternCardBody $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternCardBody::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_carousel'.
 */
function ui_suite_bootstrap_preprocess_pattern_carousel(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternCarousel $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternCarousel::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_dropdown'.
 */
function ui_suite_bootstrap_preprocess_pattern_dropdown(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternDropdown $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternDropdown::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_navbar'.
 */
function ui_suite_bootstrap_preprocess_pattern_navbar(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternNavbar $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternNavbar::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_navbar_nav'.
 */
function ui_suite_bootstrap_preprocess_pattern_navbar_nav(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternNavbarNav $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternNavbarNav::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_nav_item'.
 */
function ui_suite_bootstrap_preprocess_pattern_nav_item(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternNavItem $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternNavItem::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_pagination'.
 */
function ui_suite_bootstrap_preprocess_pattern_pagination(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessPatternPagination $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessPatternPagination::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'select'.
 */
function ui_suite_bootstrap_preprocess_select(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessSelect $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessSelect::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_preprocess_HOOK() for 'textarea'.
 */
function ui_suite_bootstrap_preprocess_textarea(array &$variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\PreprocessTextarea $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(PreprocessTextarea::class);
  $instance->preprocess($variables);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for 'input'.
 */
function ui_suite_bootstrap_theme_suggestions_input_alter(array &$suggestions, array $variables): void {
  /** @var \Drupal\ui_suite_bootstrap\HookHandler\ThemeSuggestionsAlter $instance */
  $instance = \Drupal::service('class_resolver')
    ->getInstanceFromDefinition(ThemeSuggestionsAlter::class);
  $instance->input($suggestions, $variables);
}

/**
 * Add a value into the class attributes of a given element.
 *
 * Assumes element is an array.
 * Inspired by: https://www.drupal.org/node/3334294
 *
 * @param array $element
 *   An array.
 * @param string[]|string ...$classes
 *   The classes to add on element. Arguments can include string keys directly,
 *   or arrays of string keys.
 *
 * @return array
 *   The element with the given class(es) in attributes.
 */
function _ui_suite_bootstrap_add_class(array $element, ...$classes): array {
  if (_ui_suite_bootstrap_is_numeric_array($element)) {
    foreach ($element as $index => $item) {
      if (!\is_array($item)) {
        continue;
      }
      $element[$index] = _ui_suite_bootstrap_add_class($item, ...$classes);
    }
    return $element;
  }
  $attributes = new Attribute($element['#attributes'] ?? []);
  $attributes->addClass(...$classes);
  $element['#attributes'] = $attributes->toArray();
  return $element;
}

/**
 * Set attribute on a given element.
 *
 * Assumes element is an array.
 * Inspired by: https://www.drupal.org/node/3334294
 *
 * @param array $element
 *   An array.
 * @param string $name
 *   The attribute name.
 * @param mixed $value
 *   (optional) The attribute value.
 *
 * @return array
 *   The element with the given sanitized attribute's value.
 */
function _ui_suite_bootstrap_set_attribute(array $element, string $name, mixed $value): array {
  if (_ui_suite_bootstrap_is_numeric_array($element)) {
    foreach ($element as $index => $item) {
      if (!\is_array($item)) {
        continue;
      }
      $element[$index] = _ui_suite_bootstrap_set_attribute($item, $name, $value);
    }
    return $element;
  }
  $element['#attributes'] = AttributeHelper::mergeCollections(
    $element['#attributes'] ?? [],
    new Attribute([$name => $value])
  );
  return $element;
}

/**
 * Check if an array is numeric.
 *
 * @param array $array
 *   The array to check.
 *
 * @return bool
 *   TRUE if the array is numeric. FALSE in case of associative array.
 */
function _ui_suite_bootstrap_is_numeric_array(array $array): bool {
  foreach (array_keys($array) as $a) {
    if (!is_int($a)) {
      return FALSE;
    }
  }
  return TRUE;
}
