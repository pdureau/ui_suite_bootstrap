<?php

/**
 * @file
 * Functions to support theming in the ui_suite_bootstrap theme.
 */

declare(strict_types = 1);

use Drupal\Core\Template\Attribute;
use Drupal\Core\Template\AttributeHelper;

/**
 * Add a value into the class attributes of a given element.
 *
 * Assumes element is an array.
 * Inspired by: https://www.drupal.org/node/3334294
 *
 * @param array $element
 *   An array.
 * @param string[]|string ...$classes
 *   The classes to add on element. Arguments can include string keys directly,
 *   or arrays of string keys.
 *
 * @return array
 *   The element with the given class(es) in attributes.
 */
function _ui_suite_bootstrap_add_class(array $element, ...$classes): array {
  // Element can be a render array or a list of render arrays.
  if (array_is_list($element)) {
    foreach ($element as $index => $item) {
      $element[$index] = _ui_suite_bootstrap_add_class($element[$index], $classes);
    }
    return $element;
  }
  $attributes = new Attribute($element['#attributes'] ?? []);
  $attributes->addClass(...$classes);
  $element['#attributes'] = $attributes->toArray();
  return $element;
}

/**
 * Set attribute on a given element.
 *
 * Assumes element is an array.
 * Inspired by: https://www.drupal.org/node/3334294
 *
 * @param array $element
 *   An array.
 * @param string $name
 *   The attribute name.
 * @param mixed $value
 *   (optional) The attribute value.
 *
 * @return array
 *   The element with the given sanitized attribute's value.
 */
function _ui_suite_bootstrap_set_attribute(array $element, string $name, string $value): array {
  // Element can be a render array or a list of render arrays.
  if (array_is_list($element)) {
    foreach ($element as $index => $item) {
      $element[$index] = _ui_suite_bootstrap_set_attribute($element[$index], $name, $value);
    }
    return $element;
  }
  $element['#attributes'] = AttributeHelper::mergeCollections(
    $element['#attributes'] ?? [],
    new Attribute([$name => $value])
  );
  return $element;
}

/**
 * Implements hook_preprocess_HOOK() for 'page'.
 */
function ui_suite_bootstrap_preprocess_page(array &$variables): void {
  // Will be replaced by UI Skins.
  $variables['container'] = 'container';
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_card'.
 *
 * See also: https://getbootstrap.com/docs/4.6/components/card/.
 */
function ui_suite_bootstrap_preprocess_pattern_card(array &$variables): void {
  if (array_key_exists('image', $variables) && is_array($variables['image'])) {
    $class = 'card-img-top';
    if ($variables['variant'] === 'overlay') {
      $class = 'card-img';
    }
    $variables['image'] = _ui_suite_bootstrap_add_class($variables['image'], $class);
  }
  if (array_key_exists('links', $variables) && is_array($variables['links'])) {
    $variables['links'] = _ui_suite_bootstrap_add_class($variables['links'], 'card-link');
  }
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_carousel'.
 *
 * See also: https://getbootstrap.com/docs/4.6/components/carousel/.
 */
function ui_suite_bootstrap_preprocess_pattern_carousel(array &$variables): void {
  // Nicer preview with fixed width.
  if ($variables['context']->getType() == 'preview') {
    $variables['attributes']['style'] = "width: 800px";
  }
}

/**
 * Implements hook_preprocess_HOOK() for 'pattern_figure'.
 *
 * See also: https://getbootstrap.com/docs/4.6/components/figures/.
 */
function ui_suite_bootstrap_preprocess_pattern_figure(array &$variables): void {
  if (array_key_exists('image', $variables) && is_array($variables['image'])) {
    $variables['image'] = _ui_suite_bootstrap_add_class($variables['image'], 'figure-img');
  }
}

/*
 * Implements hook_preprocess_HOOK() for 'pattern_pagination'.
 *
 * See also: https://getbootstrap.com/docs/4.6/components/pagination/.
 */
function ui_suite_bootstrap_preprocess_pattern_pagination(array &$variables): void {
  $variables['current'] = (int) (string) $variables['current'];
}

/*
 * Implements hook_preprocess_HOOK() for 'pattern_drowpdown'.
 *
 * See also: https://getbootstrap.com/docs/4.6/components/dropdowns/.
 */
function ui_suite_bootstrap_preprocess_pattern_dropdown(array &$variables): void {
  if (isset($variables['split']) && $variables['split']) {
    if (array_is_list($variables['button'])) {
      $variables['button'] = $variables['button'][0];
    }
    $split_button = $variables['button'];
    unset($split_button['#label']);
    unset($split_button['#url']);
    $split_button = _ui_suite_bootstrap_set_attribute($split_button, 'data-toggle', 'dropdown');
    $split_button = _ui_suite_bootstrap_set_attribute($split_button, 'data-toggle', 'dropdown-toggle-split');
    $split_button = _ui_suite_bootstrap_set_attribute($split_button, 'aria-expanded', 'false');
    $split_button = _ui_suite_bootstrap_add_class($split_button, 'dropdown-toggle');
    $variables['button'] = [
      $variables['button'],
      $split_button,
    ];
    return;
  }
  if (array_key_exists('button', $variables) && is_array($variables['button'])) {
    $variables['button'] = _ui_suite_bootstrap_set_attribute($variables['button'], 'data-toggle', 'dropdown');
    $variables['button'] = _ui_suite_bootstrap_set_attribute($variables['button'], 'aria-expanded', 'false');
    $variables['button'] = _ui_suite_bootstrap_add_class($variables['button'], 'dropdown-toggle');
  }
}


/*
 * Implements hook_preprocess_HOOK() for 'image'.
 *
 * Convert relative path to full path for card, carousel & figure previews.
 */
function ui_suite_bootstrap_preprocess_image(array &$variables): void {
  $uri = $variables["uri"];
  $is_absolute = isset(parse_url($uri)['host']) || \str_starts_with($uri, "/") || \str_starts_with($uri, "data:");
  if (!$is_absolute) {
    $variables["attributes"]["src"] = base_path() . $variables["directory"] . "/" . $uri;
  }
}
